
GPIO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000188  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 000000d8  00000000  00000000  0000020c  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000073b  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000312  00000000  00000000  00000a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000002f2  00000000  00000000  00000d31  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  0000015c  00000000  00000000  00001024  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000294  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000472  00000000  00000000  00001414  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000a8  00000000  00000000  00001886  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 9c 00 	call	0x138	; 0x138 <main>
  64:	0c 94 c2 00 	jmp	0x184	; 0x184 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <led_Config>:
 *  Author: Abanob
 */ 
#include "led_driver.h"

void led_Config(unsigned char port, unsigned char pin){
	gpio_PIN_Direction(port, pin, OUT);
  6c:	41 e0       	ldi	r20, 0x01	; 1
  6e:	0e 94 56 00 	call	0xac	; 0xac <gpio_PIN_Direction>
  72:	08 95       	ret

00000074 <led_ON>:
}
void led_ON(unsigned char port, unsigned char pin){
	gpio_PIN_WRITE(port, pin, HIGH);
  74:	41 e0       	ldi	r20, 0x01	; 1
  76:	0e 94 79 00 	call	0xf2	; 0xf2 <gpio_PIN_WRITE>
  7a:	08 95       	ret

0000007c <led_OFF>:
}
void led_OFF(unsigned char port, unsigned char pin){
	gpio_PIN_WRITE(port, pin, LOW);
  7c:	40 e0       	ldi	r20, 0x00	; 0
  7e:	0e 94 79 00 	call	0xf2	; 0xf2 <gpio_PIN_WRITE>
  82:	08 95       	ret

00000084 <led_Toggle>:
		led_OFF(port, pin);
	else
		led_ON(port, pin);
}
bool Is_ON(unsigned char port, unsigned char pin){
	return (WRITE(port)&(1<<pin));
  84:	e8 2f       	mov	r30, r24
  86:	f0 e0       	ldi	r31, 0x00	; 0
  88:	92 81       	ldd	r25, Z+2	; 0x02
  8a:	41 e0       	ldi	r20, 0x01	; 1
  8c:	50 e0       	ldi	r21, 0x00	; 0
  8e:	9a 01       	movw	r18, r20
  90:	06 2e       	mov	r0, r22
  92:	02 c0       	rjmp	.+4      	; 0x98 <led_Toggle+0x14>
  94:	22 0f       	add	r18, r18
  96:	33 1f       	adc	r19, r19
  98:	0a 94       	dec	r0
  9a:	e2 f7       	brpl	.-8      	; 0x94 <led_Toggle+0x10>
  9c:	29 23       	and	r18, r25
}
void led_OFF(unsigned char port, unsigned char pin){
	gpio_PIN_WRITE(port, pin, LOW);
}
void led_Toggle(unsigned char port, unsigned char pin){
	if(Is_ON(port, pin))
  9e:	19 f0       	breq	.+6      	; 0xa6 <led_Toggle+0x22>
		led_OFF(port, pin);
  a0:	0e 94 3e 00 	call	0x7c	; 0x7c <led_OFF>
  a4:	08 95       	ret
	else
		led_ON(port, pin);
  a6:	0e 94 3a 00 	call	0x74	; 0x74 <led_ON>
  aa:	08 95       	ret

000000ac <gpio_PIN_Direction>:
unsigned char gpio_LOWER_READ(unsigned char port){
	return ((READ(port)<<4) >> 4);
}

void gpio_PIN_Direction(unsigned char port, unsigned char pin, unsigned char direction){
	switch (direction)
  ac:	44 23       	and	r20, r20
  ae:	89 f0       	breq	.+34     	; 0xd2 <gpio_PIN_Direction+0x26>
  b0:	41 30       	cpi	r20, 0x01	; 1
  b2:	f1 f4       	brne	.+60     	; 0xf0 <gpio_PIN_Direction+0x44>
	{
		case OUT: DIR(port) |= (1<<pin);
  b4:	e8 2f       	mov	r30, r24
  b6:	f0 e0       	ldi	r31, 0x00	; 0
  b8:	21 81       	ldd	r18, Z+1	; 0x01
  ba:	81 e0       	ldi	r24, 0x01	; 1
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	ac 01       	movw	r20, r24
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <gpio_PIN_Direction+0x1a>
  c2:	44 0f       	add	r20, r20
  c4:	55 1f       	adc	r21, r21
  c6:	6a 95       	dec	r22
  c8:	e2 f7       	brpl	.-8      	; 0xc2 <gpio_PIN_Direction+0x16>
  ca:	ba 01       	movw	r22, r20
  cc:	62 2b       	or	r22, r18
  ce:	61 83       	std	Z+1, r22	; 0x01
		break;
  d0:	08 95       	ret
		case IN : DIR(port) &= ~(1<<pin);
  d2:	e8 2f       	mov	r30, r24
  d4:	f0 e0       	ldi	r31, 0x00	; 0
  d6:	21 81       	ldd	r18, Z+1	; 0x01
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	ac 01       	movw	r20, r24
  de:	02 c0       	rjmp	.+4      	; 0xe4 <gpio_PIN_Direction+0x38>
  e0:	44 0f       	add	r20, r20
  e2:	55 1f       	adc	r21, r21
  e4:	6a 95       	dec	r22
  e6:	e2 f7       	brpl	.-8      	; 0xe0 <gpio_PIN_Direction+0x34>
  e8:	ba 01       	movw	r22, r20
  ea:	60 95       	com	r22
  ec:	62 23       	and	r22, r18
  ee:	61 83       	std	Z+1, r22	; 0x01
  f0:	08 95       	ret

000000f2 <gpio_PIN_WRITE>:
	}
}
void gpio_PIN_WRITE(unsigned char port, unsigned char pin, unsigned char direction){
	switch (direction)
  f2:	44 23       	and	r20, r20
  f4:	89 f0       	breq	.+34     	; 0x118 <gpio_PIN_WRITE+0x26>
  f6:	41 30       	cpi	r20, 0x01	; 1
  f8:	f1 f4       	brne	.+60     	; 0x136 <gpio_PIN_WRITE+0x44>
	{
		case OUT: WRITE(port) |= (1<<pin);
  fa:	e8 2f       	mov	r30, r24
  fc:	f0 e0       	ldi	r31, 0x00	; 0
  fe:	22 81       	ldd	r18, Z+2	; 0x02
 100:	81 e0       	ldi	r24, 0x01	; 1
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	ac 01       	movw	r20, r24
 106:	02 c0       	rjmp	.+4      	; 0x10c <gpio_PIN_WRITE+0x1a>
 108:	44 0f       	add	r20, r20
 10a:	55 1f       	adc	r21, r21
 10c:	6a 95       	dec	r22
 10e:	e2 f7       	brpl	.-8      	; 0x108 <gpio_PIN_WRITE+0x16>
 110:	ba 01       	movw	r22, r20
 112:	62 2b       	or	r22, r18
 114:	62 83       	std	Z+2, r22	; 0x02
		break;
 116:	08 95       	ret
		case IN : WRITE(port) &= ~(1<<pin);
 118:	e8 2f       	mov	r30, r24
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	22 81       	ldd	r18, Z+2	; 0x02
 11e:	81 e0       	ldi	r24, 0x01	; 1
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	ac 01       	movw	r20, r24
 124:	02 c0       	rjmp	.+4      	; 0x12a <gpio_PIN_WRITE+0x38>
 126:	44 0f       	add	r20, r20
 128:	55 1f       	adc	r21, r21
 12a:	6a 95       	dec	r22
 12c:	e2 f7       	brpl	.-8      	; 0x126 <gpio_PIN_WRITE+0x34>
 12e:	ba 01       	movw	r22, r20
 130:	60 95       	com	r22
 132:	62 23       	and	r22, r18
 134:	62 83       	std	Z+2, r22	; 0x02
 136:	08 95       	ret

00000138 <main>:

int main(void)

{
	
	led_Config(lED_PORT,LED_1);
 138:	65 e0       	ldi	r22, 0x05	; 5
 13a:	80 e3       	ldi	r24, 0x30	; 48
 13c:	0e 94 36 00 	call	0x6c	; 0x6c <led_Config>
	led_ON(lED_PORT,LED_1);
 140:	65 e0       	ldi	r22, 0x05	; 5
 142:	80 e3       	ldi	r24, 0x30	; 48
 144:	0e 94 3a 00 	call	0x74	; 0x74 <led_ON>
	
	led_Config(lED_PORT,LED_2);
 148:	66 e0       	ldi	r22, 0x06	; 6
 14a:	80 e3       	ldi	r24, 0x30	; 48
 14c:	0e 94 36 00 	call	0x6c	; 0x6c <led_Config>
	led_ON(lED_PORT,LED_2);
 150:	66 e0       	ldi	r22, 0x06	; 6
 152:	80 e3       	ldi	r24, 0x30	; 48
 154:	0e 94 3a 00 	call	0x74	; 0x74 <led_ON>
	led_Config(lED_PORT,LED_3);
 158:	67 e0       	ldi	r22, 0x07	; 7
 15a:	80 e3       	ldi	r24, 0x30	; 48
 15c:	0e 94 36 00 	call	0x6c	; 0x6c <led_Config>
	led_ON(lED_PORT,LED_3);
 160:	67 e0       	ldi	r22, 0x07	; 7
 162:	80 e3       	ldi	r24, 0x30	; 48
 164:	0e 94 3a 00 	call	0x74	; 0x74 <led_ON>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 168:	2f e3       	ldi	r18, 0x3F	; 63
 16a:	8d e0       	ldi	r24, 0x0D	; 13
 16c:	93 e0       	ldi	r25, 0x03	; 3
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <main+0x36>
 176:	00 c0       	rjmp	.+0      	; 0x178 <main+0x40>
 178:	00 00       	nop
	

	while (TRUE)
	{
		_delay_ms(1000);
		led_Toggle(lED_PORT,LED_1);
 17a:	65 e0       	ldi	r22, 0x05	; 5
 17c:	80 e3       	ldi	r24, 0x30	; 48
 17e:	0e 94 42 00 	call	0x84	; 0x84 <led_Toggle>
 182:	f2 cf       	rjmp	.-28     	; 0x168 <main+0x30>

00000184 <_exit>:
 184:	f8 94       	cli

00000186 <__stop_program>:
 186:	ff cf       	rjmp	.-2      	; 0x186 <__stop_program>
